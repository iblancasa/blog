<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">iblancasa - Blog</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://blog.iblancasa.com/feed.xml" />
<link rel="alternate" type="text/html" href="http://blog.iblancasa.com" />
<updated>2016-02-03T22:56:23+00:00</updated>
<id>http://blog.iblancasa.com/</id>
<author>
  <name>Israel Blancas</name>
  <uri>http://blog.iblancasa.com/</uri>
  
</author>


<entry>
  <title type="html"><![CDATA[Comentando Sinfonier y un arreglillo]]></title>
  <link rel="alternate" type="text/html" href="http://blog.iblancasa.com/article/tutoriales/sinfonier-como-ejecutarlo/" />
  <id>http://blog.iblancasa.com/article/tutoriales/sinfonier-como-ejecutarlo</id>
  <published>2016-02-03T00:00:00+00:00</published>
  <updated>2016-02-03T00:00:00+00:00</updated>
  <author>
    <name>Israel Blancas</name>
    <uri>http://blog.iblancasa.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Hoy vengo a hablaros de &lt;a href=&quot;http://sinfonier-project.net/&quot;&gt;Sinfonier&lt;/a&gt;. Tengo que aclarar, antes de empezar, que cuando escribo este post no lo he utilizado ni una vez. Solo lo he trasteado, aunque sin mucha idea pero, como veréis más adelante, mi intención no es hacer un tutorial sobre cómo se usa (aunque no descarto hacer una breve guía porque la documentación que me he encontrado es bastante escasa).&lt;/p&gt;

&lt;p&gt;En el siguiente vídeo podréis ver qué es Sinfonier y para qué se utiliza.&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/109057651&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/109057651&quot;&gt;Sinfonier: Storm Builder for Security Intelligence&lt;/a&gt; from &lt;a href=&quot;https://vimeo.com/sinfonierproject&quot;&gt;Sinfonier Project&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Como podemos ver, es un software que hace de capa de abstracción sobre &lt;a href=&quot;http://storm.apache.org/&quot;&gt;Apache Storm&lt;/a&gt; (un sistema para realizar computación de forma distribuida).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sinfonier-project&quot;&gt;Aquí podéis acceder a su organización en GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.sinfonier-project.net/2015/12/sinfonier-quick-start.html&quot;&gt;Este artículo es el más interesante (al menos para mí de su blog. Es un “getting started”.)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pero-cmo-funciona&quot;&gt;Pero… ¿cómo funciona?&lt;/h2&gt;
&lt;p&gt;Consiste en conectar, de forma gráfica, una serie de módulos para realizar procesamiento de datos.&lt;/p&gt;

&lt;p&gt;Tenemos tres tipos de “módulos”:
* Spout: estos módulos leen de una fuente de datos. Un ejemplo de ellos podría ser la API Streaming de Twitter.
* Bolt: realiza procesamiento sobre un flujo de datos
* Drain: almacena los datos o los muestra en alguna interfaz como un “dashboard”&lt;/p&gt;

&lt;p&gt;Estos módulos se conectan entre sí en lo que se llama una topología. Los “spouts” se conectan a los “bolts” y estos a su vez a los “drains” (donde cada conexión implica un flujo de datos).&lt;/p&gt;

&lt;p&gt;## Vale pero… ¿y lo del arreglillo?
Para crear un bolt (o cuarquier otro tipo de módulo) solo tenéis que seguir las instrucciones que hay en el artículo &lt;a href=&quot;http://blog.sinfonier-project.net/2015/10/creacion-de-un-bolt-he-sido-hackeado.html&quot;&gt;“Creación de un bolt: ¿he sido hackeado?”&lt;/a&gt;. Como podéis comprobar, la depuración del código puede ser algo pesada: copiar el código a un gist, enviarlo a Sinfonier, procesarlo y comprobar los errores.&lt;/p&gt;

&lt;p&gt;Para agilizar el proceso, los desarrolladores han creado una máquina virtual para VirtualBox &lt;a href=&quot;http://blog.sinfonier-project.net/2016/02/development-vm-support-python-exceptions.html&quot;&gt;(en este artículo puedes ver cómo ejecutarla)&lt;/a&gt; donde han instalado Eclipse y han creado los ficheros del proyecto necesarios para desarrollar nuestro propio módulo.&lt;/p&gt;

&lt;p&gt;Estos ficheros están disponibles en &lt;a href=&quot;https://github.com/sinfonier-project/sinfonier-dev-tool&quot;&gt;un repositorio de GitHub&lt;/a&gt;. Si echamos un vistazo (aunque la documentación del código es nula y cuesta comprenderlo) lo que se está haciendo es ejecutar una batería de tests (de esto ya nos avisan en el artículo que enlacé en el párrafo anterior) es decir, los test no se ejecutan sobre “Apache Storm” y mucho menos sobre “Sinfonier”. Teniendo en cuenta que ejecutar Eclipse ya puede ser un auténtico desafío a la velocidad de nuestro PC, decidí intentar ejecutar estos test en mi máquina (sin utilizar ningún tipo de virtualización).&lt;/p&gt;

&lt;h3 id=&quot;cmo-ejecutar-los-test-en-mi-mquina&quot;&gt;¿Cómo ejecutar los test en mi máquina?&lt;/h3&gt;
&lt;p&gt;Tengo que avisar que yo lo he hecho en un sistema operativo Linux, así que no sé cómo funciona en Windows o Mac.&lt;/p&gt;

&lt;h4 id=&quot;qu-necesito-instalar&quot;&gt;¿Qué necesito instalar?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Python (versión 2.7)&lt;/li&gt;
  &lt;li&gt;Módulo Python “APScheduler”&lt;/li&gt;
  &lt;li&gt;Java JDK&lt;/li&gt;
  &lt;li&gt;Maven&lt;/li&gt;
  &lt;li&gt;Haz un clone de &lt;a href=&quot;https://github.com/iblancasa/sinfonier-dev-tool&quot;&gt;este repositorio&lt;/a&gt;. Como podrás comprobar, es un fork del de “Sinfonier” (que a su vez es un fork de otro). Cuando traté de ejecutar los test en la máquina virtual, todos fallaban debido a que faltaban parámetros y algunas cosas para poder ejecutar Maven desde terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cmo-ejecuto&quot;&gt;¿Cómo ejecuto?&lt;/h4&gt;
&lt;p&gt;Ve al directorio raíz del repositorio que has clonado y ejecuta &lt;code&gt;mvn package&lt;/code&gt;. Se descargarán las dependencias y ejecutarán los test. Si quieres saber cómo cambiar de ejecutar los test de los ficheros Java a los de Python, &lt;a href=&quot;http://blog.sinfonier-project.net/2016/01/sinfonier-development-virtual-machine_26.html&quot;&gt;echa un ojo a este artículo&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;cmo-aado-nuevos-test&quot;&gt;¿Cómo añado nuevos test?&lt;/h4&gt;
&lt;p&gt;Son test unitarios, mira los ficheros y los artículos que he ido enlazando.&lt;/p&gt;

&lt;h2 id=&quot;algunos-artculos-interesantes-relacionados-con-sinfonier-son&quot;&gt;Algunos artículos interesantes relacionados con Sinfonier son:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.sinfonier-project.net/2015/12/chatterbot-with-sinfonier.html&quot;&gt;Chatterbot with Sinfonier&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.sinfonier-project.net/2014/10/creando-informacion-dummy.html&quot;&gt;Creando información “dummy”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.sinfonier-project.net/2014/10/have-i-been-pwned.html&quot;&gt;Have I been pwned?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.sinfonier-project.net/2014/10/recibe-un-mensaje-emite-varios.html&quot;&gt;Recibe un mensaje, emite varios&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.sinfonier-project.net/2014/11/ticktuples-ejecucion-de-codigo-por.html&quot;&gt;TickTuples: ejecución de código por intervalo de tiempo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.sinfonier-project.net/2014/10/vuela-barato-con-sinfonier-y-ryanair.html&quot;&gt;Vuela barato con Sinfonier y Ryanair&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.sinfonier-project.net/2015/08/using-mongolab-with-sinfonier.html&quot;&gt;Using Mongolab with Sinfonier&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sinfonier para el procesamiento del lenguaje natural: &lt;a href=&quot;http://blog.sinfonier-project.net/2015/08/sinfonier-para-procesamiento-del.html&quot;&gt;parte I&lt;/a&gt; y &lt;a href=&quot;http://blog.sinfonier-project.net/2015/10/sinfonier-para-procesamiento-del.html&quot;&gt;parte II&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.sinfonier-project.net/2015/09/how-to-use-telegram-modules.html&quot;&gt;How to use Telegram modules?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y (al menos por ahora) no puedo ayudar mucho más. Aunque no he trabajado con Sinfonier y solo conozco el concepto, me pareció necesario un artículo como este para poder ejecutar los tests sin tener que utilizar una máquina virtual. Espero que haya sido útil.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://blog.iblancasa.com/article/tutoriales/sinfonier-como-ejecutarlo/&quot;&gt;Comentando Sinfonier y un arreglillo&lt;/a&gt; was originally published by Israel Blancas at &lt;a href=&quot;http://blog.iblancasa.com&quot;&gt;iblancasa - Blog&lt;/a&gt; on February 03, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Hacking Miniblip]]></title>
  <link rel="alternate" type="text/html" href="http://blog.iblancasa.com/article/eventos/hacking-miniblip/" />
  <id>http://blog.iblancasa.com/article/eventos/hacking-miniblip</id>
  <published>2015-12-04T00:00:00+00:00</published>
  <updated>2015-12-04T00:00:00+00:00</updated>
  <author>
    <name>Israel Blancas</name>
    <uri>http://blog.iblancasa.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;img src=&quot;http://hack-miniblip.github.io/images/pic02.jpg&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Los días 30 de noviembre y 1 de diciembre, &lt;a href=&quot;http://www.circolab.org/&quot;&gt;Circolab&lt;/a&gt; (una iniciativa de la empresa &lt;a href=&quot;http://www.bq.com/es/&quot;&gt;BQ&lt;/a&gt;) estuvo en Granada. La &lt;a href=&quot;http://osl.ugr.es&quot;&gt;Oficina de Software Libre de la Universidad de Granada&lt;/a&gt; organizó con ellos un hackathón para trabajar en la placa Miniblip.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://hack-miniblip.github.io/images/pic03.jpg&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La placa ha sido diseñada por la gente de Circolab y esta era una de las primeras veces que se trabajaba en ella.&lt;/p&gt;

&lt;p&gt;Esta placa cuenta con una matriz de leds, sensores capacitivos, un potenciómetro, un sensor de luminosidad, lugar para colocar un sensor de vibración, un botón…&lt;/p&gt;

&lt;p&gt;Fuimos descubriendo muchas cosas de la placa pero, probablemente, lo más interesante fue ir creando diversos ejemplos y la página &lt;a href=&quot;http://hack-miniblip.github.io/&quot;&gt;de la organización que se creó en  GitHub&lt;/a&gt;, donde se explican cosas de la placa, cómo programarla y cómo compartir tu código.&lt;/p&gt;

&lt;p&gt;Conocí a gente muy interesante como el famoso &lt;a href=&quot;https://twitter.com/Obijuan_cube&quot;&gt;Juan González&lt;/a&gt;, conocido como Obijuan.&lt;/p&gt;

&lt;p&gt;Dos días (y los que han venido después), muy productivos.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://blog.iblancasa.com/article/eventos/hacking-miniblip/&quot;&gt;Hacking Miniblip&lt;/a&gt; was originally published by Israel Blancas at &lt;a href=&quot;http://blog.iblancasa.com&quot;&gt;iblancasa - Blog&lt;/a&gt; on December 04, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Docker]]></title>
  <link rel="alternate" type="text/html" href="http://blog.iblancasa.com/article/tutoriales/docker/" />
  <id>http://blog.iblancasa.com/article/tutoriales/docker</id>
  <published>2015-11-20T00:00:00+00:00</published>
  <updated>2015-11-20T00:00:00+00:00</updated>
  <author>
    <name>Israel Blancas</name>
    <uri>http://blog.iblancasa.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;img src=&quot;http://fotos.subefotos.com/4e7301538895cdc19b0eb5f2a3b60730o.png&quot; alt=&quot;Docker&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;qu-es-docker&quot;&gt;¿Qué es Docker?&lt;/h1&gt;

&lt;p&gt;Docker es una herramienta que permite crear contenedores. Estos contenedores, son sistemas de virtualización que nos permiten tener aplicaciones empaquetadas, de forma que sean autosuficientes (al disponer de todas las bibliotecas y dependencias que estas necesiten).&lt;/p&gt;

&lt;p&gt;En nuestro caso, se ha procedido a crear un contenedor Docker al que &lt;a href=&quot;https://registry.hub.docker.com/u/iblancasa/backendsi2-iv/&quot;&gt;se puede acceder a través de este enlace.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;por-qu-utilizar-docker&quot;&gt;¿Por qué utilizar Docker?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Es fácil de instalar&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/installation/&quot;&gt;Compatible con muchos sistemas operativos y sistemas cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Es más seguro que otros métodos (para la máquina anfitriona) ya que los usuarios que acceden a la aplicación solo pueden acceder al entorno creado en el contenedor&lt;/li&gt;
  &lt;li&gt;Permite integración continua&lt;/li&gt;
  &lt;li&gt;Podemos basarnos en otro contenedor ya creado para ahorranos trabajo&lt;/li&gt;
  &lt;li&gt;Gracias a que los contenedores quedan publicados en su web, si alguien quiere hacer una colaboración para mejorar nuestro sistema de virtualización, puede hacerlo&lt;/li&gt;
  &lt;li&gt;Estos “tapers” pueden usarse tanto para pruebas como para producción (desde la versión 1 de Docker, ya que las anteriores no eran lo suficientemente maduras)&lt;/li&gt;
  &lt;li&gt;Es ligero&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cmo-generar-un-contenedor&quot;&gt;¿Cómo generar un contenedor?&lt;/h2&gt;

&lt;h3 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h3&gt;
&lt;p&gt;Para generar este contenedor, se crea un fichero llamado “Dockerfile” y que es el que toma Docker para generar un contenedor. En él, se indican distintas órdenes que permiten al sistema saber qué queremos que se instale (imagen base, ficheros que queremos copiar del repositorio…). &lt;a href=&quot;https://docs.docker.com/reference/builder/&quot;&gt;Aquí se puede obtener una lista de todas las órdenes disponibles y su sintáxis.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Un ejemplo de Dockerfile:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM ubuntu
MAINTAINER iblancasa &amp;lt;iblancasa &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; gmail.com&amp;gt; Version: 1.0


RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sudo tee /etc/apt/sources.list.d/mongodb.list
RUN apt-get update
RUN apt-get install -y mongodb-org
RUN service mongod start
RUN apt-get install -y nodejs
RUN apt-get install npm git git-core -y
RUN mkdir /home/app
ADD app /home/app
ADD &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; /home/test
COPY package.json /home/
EXPOSE 3000
RUN &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; npm install&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; npm install -g mocha&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;npm install mocha chai supertest
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;nohup&amp;quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&amp;quot;/usr/bin/nodejs&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;app/index.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Puedes ejecutarlo en tu máquina con “docker build -t [NAME] .” donde [NAME] es el nombre que desees ponerle.&lt;/p&gt;

&lt;h3 id=&quot;generando-el-contenedor-desde-la-web&quot;&gt;Generando el contenedor desde la web&lt;/h3&gt;
&lt;p&gt;Para su creación, crea una cuenta en &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker.com&lt;/a&gt;. Una vez rellenado el formulario y realizadas las pertinentes verificaciones, se accede al panel de administración y se pulsa sobre “Add repository” y se selecciona “Automated Build”).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fotos.subefotos.com/4c89ddc7850be9aa6715e9059b7bf510o.jpg&quot; alt=&quot;Add repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora se nos dará opción a elegir entre seleccionar un repositorio que tengamos creado en “GitHub” o “Bitbucket” (será necesario autorizar desde ese servicio que Docker acceda a nuestra lista de repositorios) y después se nos pedirá seleccionar el repositorio con el que queremos vincular).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fotos.subefotos.com/2a75dd7e541191bd415d8965e4f9ceabo.jpg&quot; alt=&quot;Seleccionar repositorio&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tendremos que esperar un rato a que se Docker se conecte con nuestro repositorio y haga un primer “build”.
&lt;strong&gt;Es importante tener un dockerfile válido. En caso contrario, nuestro contenedor no se creará&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Cuando tengamos nuestro contenedor creado, podremos ver, en la página inicial de nuestro contenedor en Docker, el contenido del “Readme” de nuestro repositorio. Cuando modifiquemos el repositorio, se hará una nueva construcción de nuestro Docker. En la pestaña “Build Details” accedemos al historial de nuestro Docker, de forma que podemos ver si una construcción ha salido bien o no (y ver qué ha fallado).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fotos.subefotos.com/d90cf3bcf60ddd49e48bd249c1efce40o.jpg&quot; alt=&quot;Página inicial del Docker&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cmo-ejecutar-el-contenedor&quot;&gt;¿Cómo ejecutar el contenedor?&lt;/h2&gt;
&lt;p&gt;Para poder usar Docker, tendremos que instalarlo en nuestro ordenador, para ello:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get update
apt-get install docker.io&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Cuando queramos “arrancar” el servicio, ejecutaremos (como superusuario):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker -d&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Puede que el servicio no arranque y nos avise de un problema con “/var/run/docker.pid”, para ello, borramos el fichero ejecutando “rm /var/run/docker.pid” como superusuario y volvemos a ejecutar la orden anterior.&lt;/p&gt;

&lt;p&gt;En otro terminal, ejecutaremos:&lt;/p&gt;

&lt;p&gt;“docker pull iblancasa/backendsi2-iv”&lt;/p&gt;

&lt;p&gt;Que descargará nuestro Docker. Una vez finalizada la descarga, podremos ejecutar la aplicación ejecutando:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo docker run -i -t iblancasa/backendsi2-iv /bin/bash -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;ifconfig;nodejs /home&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Se ejecuta el comando &lt;code&gt;ìfconfig&lt;/code&gt; para comprobar la dirección IP y poder acceder, por ejemplo, desde nuestro navegador.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fotos.subefotos.com/8d8c0239e7af219126fe71232ef0db1eo.jpg&quot; alt=&quot;Ejecutando Docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fotos.subefotos.com/35e57fb13cd35e3020034130454d68f1o.jpg&quot; alt=&quot;Aplicación ejecutándose&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si solo queremos acceder al terminal (para, por ejemplo, ejecutar los test unitarios):&lt;/p&gt;

&lt;p&gt;“sudo docker run -i -t iblancasa/backendsi2-iv /bin/bash”&lt;/p&gt;

&lt;p&gt;Para facilitar la instalación/ejecución, el repositorio cuenta con un &lt;a href=&quot;https://github.com/iblancasa/BackendSI2-IV/blob/master/installDocker.sh&quot;&gt;script de Bash&lt;/a&gt; que hay que ejecutar como superusuario y que arrancará el docker con la aplicación.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://blog.iblancasa.com/article/tutoriales/docker/&quot;&gt;Docker&lt;/a&gt; was originally published by Israel Blancas at &lt;a href=&quot;http://blog.iblancasa.com&quot;&gt;iblancasa - Blog&lt;/a&gt; on November 20, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Cómo utilizar ExpressJS con HTTPS]]></title>
  <link rel="alternate" type="text/html" href="http://blog.iblancasa.com/article/tutoriales/como-usar-expressjs-con-https/" />
  <id>http://blog.iblancasa.com/article/tutoriales/como-usar-expressjs-con-https</id>
  <published>2015-11-19T00:00:00+00:00</published>
  <updated>2015-11-19T00:00:00+00:00</updated>
  <author>
    <name>Israel Blancas</name>
    <uri>http://blog.iblancasa.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;img src=&quot;http://fotos.subefotos.com/6529a9aca846a939dac313a0b1a2dbc4o.jpg&quot; alt=&quot;HHTPS Node ExpressJS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En esta guía voy a explicar, brévemente, como hacer que nuestro servidor realizado con &lt;a href=&quot;https://nodejs.org&quot;&gt;NodeJS&lt;/a&gt; (mediante el paquete &lt;a href=&quot;http://expressjs.com/&quot;&gt;ExpressJS&lt;/a&gt;). Si no sabes Javascript, no conoces nada de NodeJS y/o no conoces ExpressJS, comienza por ahí y vuelve aquí más tarde (es fácil, no tardarás mucho tiempo en volver).&lt;/p&gt;

&lt;h2 id=&quot;generando-los-certificados&quot;&gt;Generando los certificados&lt;/h2&gt;

&lt;p&gt;Primero será necesario generar los certificados del servidor. Cuando un usuario acceda a nuestro sitio web, obtendrá un aviso indicando que la conexión no es segura, debido a que el certificado no estará firmado por una entidad de certificación. Puedes adquirir certificados a través de Internet.&lt;/p&gt;

&lt;p&gt;Podemos generar nuestros propios certificados. La conexión seguriá estando cifrada, aunque los navegadores no podrán certificar que el servidor sea el correcto (es decir, que los usuarios no están sufriendo un &lt;a href=&quot;https://es.wikipedia.org/wiki/Ataque_Man-in-the-middle&quot;&gt;“man-in-the-middle”&lt;/a&gt;, por ejemplo).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;openssl genrsa -out chat-key.pem 1024
openssl req -new -key chat-key.pem -out certrequest.csr
openssl x509 -req -in certrequest.csr -signkey chat-key.pem -out chat-cert.pem&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;editando-el-cdigo&quot;&gt;Editando el código&lt;/h2&gt;

&lt;p&gt;Simplemente, colocaremos los ficheros generados anteriormente dentro de nuestra aplicación y los referenciaremos desde el fichero donde se lance el servidor. La ruta será relativa al “package.json”. Las claves las introduciremos en un diccionario y las pasaremos como parámetro a la hora de crear el servidor.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hskey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;chat-key.pem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hscert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;chat-cert.pem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hskey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hscert&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;https&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Como podemos apreciar, respecto al “código clásico” de ejemplo, el resto del código cambia poco.&lt;/p&gt;

&lt;p&gt;Estos certificados deben generarse con la máquina que servirá las peticiones, es decir, con el servidor. No funcionará si generamos los certificados en nuestro ordenador personal y lo subimos a un VPS, por ejemplo.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://blog.iblancasa.com/article/tutoriales/como-usar-expressjs-con-https/&quot;&gt;Cómo utilizar ExpressJS con HTTPS&lt;/a&gt; was originally published by Israel Blancas at &lt;a href=&quot;http://blog.iblancasa.com&quot;&gt;iblancasa - Blog&lt;/a&gt; on November 19, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[¿Por qué me encantan los DevFest?]]></title>
  <link rel="alternate" type="text/html" href="http://blog.iblancasa.com/article/eventos/por-que-me-encantan-los-devfest/" />
  <id>http://blog.iblancasa.com/article/eventos/por-que-me-encantan-los-devfest</id>
  <published>2015-11-18T00:00:00+00:00</published>
  <updated>2015-11-18T00:00:00+00:00</updated>
  <author>
    <name>Israel Blancas</name>
    <uri>http://blog.iblancasa.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;img src=&quot;http://skotgat.com/wp-content/uploads/2013/09/Devfest-2013.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Los DevFest son una serie de eventos organizados por colaboradores de Google (Google Developers Groups) que consisten en realizar una serie de charlas, hackathones y/o talleres sobre distintas tecnologías, teniendo gran importancia las propias de Google (como es lógico). Si quieres conocer más de estos eventos, &lt;a href=&quot;https://developers.google.com/events/devfest/&quot;&gt;aquí tienes la web oficial en Google&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;¿Y por qué me encantan? Vale, no he ido a muchos… ¡pero lo he pasado genial! Este año pude ir al DevFest de Jaén (era la primera vez que el GDG de allí organizaba algo) y al de Granada (donde tienen bastante experiencia).&lt;/p&gt;

&lt;p&gt;¿Y qué había? Pues muchas charlas (es difícil poder elegir una como la más interesante), sobre todo de Android. Repasé algunos conceptos (que no tenía muy frescos, como el de &lt;a href=&quot;https://es.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;S.O.L.I.D.&lt;/a&gt;), aprendí cosas nuevas (algunos consejos para desarrollar en Android -aunque fuese aplicable a muchos otros entornos- de una forma más profesional, directrices a seguir para crear una API correcta y mantenible, algunos tipos de arquitecturas, bibliotecas impresionantes -como &lt;a href=&quot;http://reactivex.io/&quot;&gt;ReactiveX&lt;/a&gt;, que se vió en su versión Java-), escuché ideas de otros desarrolladores (importante) y, dicho sea de paso, conseguí algunos regalitos.&lt;/p&gt;

&lt;p&gt;Espero que se hagan muchos más eventos como estos ya que facilitan la difusión del conocimiento, así como que los desarrolladores se conozcan (tanto entre ellos como a sí mismos) y puedan mejorar sus habilidades.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://blog.iblancasa.com/article/eventos/por-que-me-encantan-los-devfest/&quot;&gt;¿Por qué me encantan los DevFest?&lt;/a&gt; was originally published by Israel Blancas at &lt;a href=&quot;http://blog.iblancasa.com&quot;&gt;iblancasa - Blog&lt;/a&gt; on November 18, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Hackathon Movilforum en Málaga]]></title>
  <link rel="alternate" type="text/html" href="http://blog.iblancasa.com/article/eventos/hackathon-movilforum/" />
  <id>http://blog.iblancasa.com/article/eventos/hackathon-movilforum</id>
  <published>2015-11-10T00:00:00+00:00</published>
  <updated>2015-11-10T00:00:00+00:00</updated>
  <author>
    <name>Israel Blancas</name>
    <uri>http://blog.iblancasa.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;img src=&quot;http://movilforum.com/wp-content/uploads/2015/07/retograndeppal.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;el-evento&quot;&gt;El evento&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://movilforum.com/&quot;&gt;Movilforum&lt;/a&gt;, el programa de patners de soluciones de Telefónica, ha venido organizando una serie de “hackathones” relacionados con la placa Intel Edison. En ellos, el objetivo era conseguir una idea para presentar a un certamen propuesto por &lt;a href=&quot;https://ficod.es/&quot;&gt;FICOD&lt;/a&gt; y yo participé en el último de ellos que tuvo lugar en Málga los días 29 y 30 de octubre.&lt;/p&gt;

&lt;p&gt;En un primer lugar fuimos citados en un edificio que se encontraba en torno al centro de la UMA (Universidad de Málaga) y, el día de antes, se trasladó (desconozco el motivo) a la “Escuela de Ingenierías” y, para el hackathon, al “Green Ray” (ambos edificios en una zona donde parecía que el mundo dejaba de serlo). Después de varias largas charlas de patrocinadores, nos tuvimos que organizar por equipos durante el desayuno. Esto fue un poco caótico ya que los asistentes no se conocían y tampoco se sabía el perfil de cada uno de ellos (técnico, marketing…). Después de “apañarnos” (por llamarlo de alguna forma) y una rápida explicación sobre el funcionamiento de la placa Intel Edison, al fin, nos dejaron empezar a trabajar.&lt;/p&gt;

&lt;p&gt;El kit que se nos proporcionó (uno por equipo) constaba de la placa Intel Edison, la placa de prototipado y el kit de sensores de “Grove Started”.&lt;/p&gt;

&lt;p&gt;Al dia siguiente, tuvimos que presentar nuestras ideas. Se dió mucho bombo a que vendrían profesores de la UMA especializados en negocio, los cuales desaparecieron tras una hora. Los compañeros, debido a que las charlas se hacían insufribles, también fueron abandonado. ¿Lo mejor? Tras presentar tu idea, regalaban un kit completo de los que se nos había proporcionado (a cada integrante del equipo).&lt;/p&gt;

&lt;p&gt;El evento en sí valió poco la pena (alguno de los organizadores -que no todos- no tenia muy buenos modos, faltó una dinámica para que los participantes pudieran agruparse, poco tiempo para trabajar y mucho para hablar los patrocinadores…), aunque aprendí algunas cosas. ¿Lo mejor? Conseguir una Intel Edison.&lt;/p&gt;

&lt;h3 id=&quot;intel-edison&quot;&gt;Intel Edison&lt;/h3&gt;
&lt;p&gt;Nunca había trabjado con esta placa aunque sentía una gran curiosidad. Es una placa de prototipado, que permite ser insertada en otras placas en función de qué es lo que queramos hacer: existen placas para entornos de producción con sensores incorporados, otras que permiten soldar sensores o la que nos dieron en el evento (que facilita la conexión de Arduino y/o otros dispositivos).&lt;/p&gt;

&lt;p&gt;Es un x86 con 1GB de memoria RAM y una distribución Linux (llamada Yocto) por lo que permite programar en diversos lenguajes (NodeJS, Arduino, Python, C/C++). No he podido trabajar mucho con ella pero… espero poder hacer algo interesante con esta gran plataforma.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/CSe0gO3WUAABm7d.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://blog.iblancasa.com/article/eventos/hackathon-movilforum/&quot;&gt;Hackathon Movilforum en Málaga&lt;/a&gt; was originally published by Israel Blancas at &lt;a href=&quot;http://blog.iblancasa.com&quot;&gt;iblancasa - Blog&lt;/a&gt; on November 10, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[IEEExtreme v9]]></title>
  <link rel="alternate" type="text/html" href="http://blog.iblancasa.com/article/eventos/ieeextreme-v9/" />
  <id>http://blog.iblancasa.com/article/eventos/ieeextreme-v9</id>
  <updated>2015-10-27T00:00:00-00:00</updated>
  <published>2015-10-27T00:00:00+00:00</published>
  
  <author>
    <name>Israel Blancas</name>
    <uri>http://blog.iblancasa.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/profile_images/588030735325536257/3MmCEoYU.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El pasado 24 de octubre (a partir de las 2 de la mañana) y hasta las 2 de la mañana del día siguiente (la primera vez que el reloj marcaba las 2, que coincidía con el cambio de hora) se celebró el IEEExtreme, una competición de carácter mundial que realizaba su novena edición.&lt;/p&gt;

&lt;p&gt;Durante 24 horas, la organización va liberando problemas de diferentes dificultades basados en razonamientos lógicos y matemáticos, que hay que resolver mediante el desarrollo de un programa (pudiendo hacerse en diversos lenguajes). Tras subir el código a la plataforma (tantas veces como se quiera) se aplican una serie de test (que no se muestran a los participantes). Para pasar los test hay que proporcionar el resultado esperado por los mismos, no superar un tiempo de ejecución (la plataforma determina los límites de tiempo para cada problema) y no tener errores de proramación.&lt;/p&gt;

&lt;p&gt;En función del número de test que pase tu solución, la velocidad a la que se ejecute, el número de gente que lo haya intentado resolver y el número de participantes que lo haya resuelto, se obtiene una puntuación u otra.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oi65.tinypic.com/2emeipl.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En esta imagen podemos ver cómo uno de los problemas, al que intenté dar solución, pasó algunos de los test mientras que otros no por exceso de tiempo.&lt;/p&gt;

&lt;p&gt;Mi equipo “CraftCoders” consiguió 506.97 puntos, obteniendo el puesto 377/1944 a nivel mundial y el 4/30 a nivel de España.&lt;/p&gt;

&lt;p&gt;La rama estudiantil de la Universidad de Granada nos reunimos en la residencia universitaria Carlos V. Coincidía con el día de apertura de curso de la misma y no fueron pocos los curiosos que, pasados de copas, entraban a comprobar qué hacíamos a altas horas de la madrugada o por la mañana al grito de “PERO CHAVALES, ¿QUÉ HACÉIS ESTUDIANDO TAN TEMPRANO? ID DE FIESTA”.&lt;/p&gt;

&lt;p&gt;Una noche para no olvidar, que estuvo cargada de risas, momentos de emoción y muy buenas vibraciones. ¡Espero repetir el año que viene!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://blog.iblancasa.com/article/eventos/ieeextreme-v9/&quot;&gt;IEEExtreme v9&lt;/a&gt; was originally published by Israel Blancas at &lt;a href=&quot;http://blog.iblancasa.com&quot;&gt;iblancasa - Blog&lt;/a&gt; on October 27, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Hackathon Open Access Week (Semana de la Ciencia Abierta)]]></title>
  <link rel="alternate" type="text/html" href="http://blog.iblancasa.com/article/eventos/hackathon-open-access-week/" />
  <id>http://blog.iblancasa.com/article/eventos/hackathon-open-access-week</id>
  <updated>2015-10-26T00:00:00-00:00</updated>
  <published>2015-10-26T00:00:00+00:00</published>
  
  <author>
    <name>Israel Blancas</name>
    <uri>http://blog.iblancasa.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/CR_xwJeXIAELzwz.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Con motivo de la Open Access Week (Semana de la Ciencia Abierta), la &lt;a href=&quot;http://osl.ugr.es/&quot;&gt;Oficina de Software Libre de la Universidad de Granada&lt;/a&gt; y el grupo &lt;a href=&quot;http://geneura.ugr.es/&quot;&gt;Geneura&lt;/a&gt; organizaron un hackathón. En el mismo se presentaron algunos proyectos muy interesantes:
* &lt;a href=&quot;https://github.com/JJ/nodeo&quot;&gt;Nodeo&lt;/a&gt;: una biblioteca en NodeJS de algoritmos evolutivos
* &lt;a href=&quot;https://github.com/vrivas/iconio&quot;&gt;Iconio&lt;/a&gt;: una biblioteca Javascript para analizar series temporales
* &lt;a href=&quot;https://www.musesproject.eu/&quot;&gt;Muses Project&lt;/a&gt;: un sistema que evita riesgos causados por los usuarios&lt;/p&gt;

&lt;p&gt;Yo, que me vi abrumado por el nivel de las propuestas que se presentaron, me decanté por aportar lo que pude en el &lt;a href=&quot;https://github.com/MusesProject&quot;&gt;proyecto Muses&lt;/a&gt;, añadiendo un par de aclaraciones a la documentación y solucionando un problema en los datos de ejemplo.&lt;/p&gt;

&lt;p&gt;Espero poder sacar tiempo en un futuro cercano y hacer algunas aportaciones más importantes porque como dijo Paloma (quien presentó el proyecto): es un proyecto europeo… ¡y mola!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/CR_rUPAXIAA9b_Z.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://blog.iblancasa.com/article/eventos/hackathon-open-access-week/&quot;&gt;Hackathon Open Access Week (Semana de la Ciencia Abierta)&lt;/a&gt; was originally published by Israel Blancas at &lt;a href=&quot;http://blog.iblancasa.com&quot;&gt;iblancasa - Blog&lt;/a&gt; on October 26, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Comentando el hackathón -Todos incluidos- en Granada]]></title>
  <link rel="alternate" type="text/html" href="http://blog.iblancasa.com/article/eventos/hackathon-todos-incluidos/" />
  <id>http://blog.iblancasa.com/article/eventos/hackathon-todos-incluidos</id>
  <updated>2015-10-16T00:00:00-00:00</updated>
  <published>2015-10-16T00:00:00+00:00</published>
  
  <author>
    <name>Israel Blancas</name>
    <uri>http://blog.iblancasa.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Durante los días 2, 3 y 4 de octubre, el Parque de las Ciencias de Granada se llenó de programadores y gente relacionada con las nuevas tecnologías. Telefónica organizaba un hackathón (en el que previamente había que ser seleccionado tras rellenar una solicitud a través de un formulario web) sobre Internet de las Cosas.&lt;/p&gt;

&lt;p&gt;De forma paralela, se celebraban algunas actividades en otra sala: algunas charlas sobre drones, impresión 3D, realidad virtual…&lt;/p&gt;

&lt;div style=&quot;margin: 0 auto; display: block;&quot;&gt;
&lt;a data-flickr-embed=&quot;true&quot; href=&quot;https://www.flickr.com/photos/136559810@N04/albums/72157660036554232&quot; title=&quot;Hackathón Telefónica &amp;quot;Todos incluidos&amp;quot;&quot;&gt;&lt;img src=&quot;https://farm1.staticflickr.com/772/22306797055_fdf945ab83.jpg&quot; width=&quot;500&quot; height=&quot;375&quot; alt=&quot;Hackathón Telefónica &amp;quot;Todos incluidos&amp;quot;&quot; /&gt;&lt;/a&gt;&lt;script async=&quot;&quot; src=&quot;//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;El dispositivo se encuentra formado por varios módulos, como puede verse en las imágenes anteriores. Los posibles módulos son:
* Batería
* Comunicación
* Sensor de presencia (opcional y no lo tuvimos disponible)
* Un sensor de humedad, luminosidad y temperatura (opcional)
* Un “actuador”, con un led y un zumbador (opcional)&lt;/p&gt;

&lt;p&gt;Según uno de los miembros organizadores del hackathón, la carga de la batería podía durar semanas o, incluso, meses pero, tras haber cargado completamente el módulo (a través de un cable USB) y dejarlo encendido (a propósito) antes de abandonar el recinto, la carga había sido agotada durante la noche (tal vez debido a que se había usado demasiado en anteriores ocasiones o que la batería no cumple lo que promete).&lt;/p&gt;

&lt;p&gt;La comunicación se realiza por medio de una tarjeta SIM, distinta a la que se utiliza para los teléfonos móviles, pero con similar funcionalidad.&lt;/p&gt;

&lt;p&gt;En cuanto a los sensores… la temperatura parece que no era todo lo correcta que debiera y la luminosidad y humedad estaban en unidades desconocidas.&lt;/p&gt;

&lt;p&gt;El acceso a los datos se realizaba mediante una API REST. En nuestro caso, no se precisaba de token de seguridad y los Thinkin Thing estaban sirviendo los datos en un puerto distinto al habitual (para que nos fuese más sencillo desarrollar una aplicación). Si hacíamos una petición al servidor, como la siguiente:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl http://hackathon.ttcloud.net:10026/v1/contextEntities/&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ID de tu dispositivo&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; -s -S --header &lt;span class=&quot;s1&quot;&gt;&amp;#39;Accept: application/json&amp;#39;&lt;/span&gt; --header &lt;span class=&quot;s1&quot;&gt;&amp;#39;fiware-service: todosincluidos&amp;#39;&lt;/span&gt; --header &lt;span class=&quot;s1&quot;&gt;&amp;#39;x-auth-token: &amp;#39;&lt;/span&gt; --header &lt;span class=&quot;s2&quot;&gt;&amp;quot;fiware-servicepath: /iot&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Obteníamos un JSON como este:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;contextElement&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;thinkingthing&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;isPattern&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[ID]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;attributes&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cellid&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1f3c&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;charger&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;charging&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;color&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;dbm&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;-69&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;desconnection&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;humidity&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;float&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1043108.50&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;lac&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;70c&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;luminance&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;float&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;38.90&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mcc&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;214&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;melody&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mnc&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;07&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sleepcondition&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Wake&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sleeptime&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;temperature&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;float&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;28.73&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;voltage&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;float&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;6.52&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;statusCode&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;code&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;reasonPhrase&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;De los actuadores poco puedo decir ya que, salvo alguna indicación que se nos dió sobre la marcha, no recibimos más documentación. Había que realizar una petición POST a nuestro dispositivo enviándole un fichero JSON con los valores que queríamos que tomase el actuador (en el caso del LED, teníamos que dar valores a una terna RGB -siendo los posibles valores 0 ó 1- y en el caso del zumbador, no había documentación a través de Internet -gracias a uno de los organizadores, tuvimos una ligera idea de cómo funcionaba por que nos envió, a través de Google Drive, un documento con parte de la especificación-).&lt;/p&gt;

&lt;p&gt;Siento decir que no me gusta mucho esta plataforma hardware ya que creo que tiene un coste demasiado elevado para la escasa funcionalidad que tiene. Además, tener que utilizar la plataforma online de forma obligatoria lo considero una desventaja aunque claro, ahí está el negocio. También echo de menos más documentación.&lt;/p&gt;

&lt;p&gt;En cuanto a la comida y la conectividad… eso ya es otro tema.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://blog.iblancasa.com/article/eventos/hackathon-todos-incluidos/&quot;&gt;Comentando el hackathón -Todos incluidos- en Granada&lt;/a&gt; was originally published by Israel Blancas at &lt;a href=&quot;http://blog.iblancasa.com&quot;&gt;iblancasa - Blog&lt;/a&gt; on October 16, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Hola mundo]]></title>
  <link rel="alternate" type="text/html" href="http://blog.iblancasa.com/article/hola-mundo/" />
  <id>http://blog.iblancasa.com/article/hola-mundo</id>
  <updated>2015-10-06T00:00:00-00:00</updated>
  <published>2015-10-06T00:00:00+00:00</published>
  
  <author>
    <name>Israel Blancas</name>
    <uri>http://blog.iblancasa.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Tras mucho pensarlo, decidí pasar de Wordpress y empezar a utilizar Jekyll. ¿Por qué?&lt;/p&gt;

&lt;p&gt;Durante algunos años, para distintos tipos de cosas, he utilizado Wordpress. Siempre he tenido, entre otras, la misma queja: el sitio web, pese a tener poco contenido y un número bastante bajo de visitas, siempre ha ido muy lento. Incluso si utilizaba las plantillas por defecto. Por si el problema había sido a lo largo de todo este tiempo la utilización de hostings o VPS de mala calidad, probé a utilizar la plataforma PaaS (&lt;em&gt;Platform as a service&lt;/em&gt;) de &lt;a href=&quot;http://www.redhat.com/es/global/spain&quot;&gt;Red Hat&lt;/a&gt;, &lt;a href=&quot;https://www.openshift.com/&quot;&gt;OpenShift&lt;/a&gt;. A pesar de utilizar un modelo &lt;em&gt;premium&lt;/em&gt;, el resultado  fue el mismo.&lt;/p&gt;

&lt;p&gt;La necesidad de instalar sistemas de seguridad para evitar ataques o estar pendiente de las actualizaciones (que pueden ser críticas para mantener tu sitio web en pie) han sido otras de las razones.&lt;/p&gt;

&lt;p&gt;La obligación de cumplir la &lt;a href=&quot;http://www.lssi.gob.es/&quot;&gt;LSSI&lt;/a&gt; y la &lt;a href=&quot;https://www.agpd.es/portalwebAGPD/canaldocumentacion/informes_juridicos/reglamento_lopd/index-ides-idphp.php&quot;&gt;LOPD&lt;/a&gt; me llevaron a desactivar los comentarios del blog (que tampoco necesitaba), crear el típico documento declarando qué cookies utilizaba…&lt;/p&gt;

&lt;p&gt;Todo esto me hizo abandonar Wordpress. Estudié cómo funcionaban otras plataformas como &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt;, &lt;a href=&quot;https://www.blogger.com/home&quot;&gt;Blogger&lt;/a&gt; (que nunca me terminó de convencer) o &lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt; (que funciona sobre Jekyll).&lt;/p&gt;

&lt;p&gt;No quise utilizar un sistema que me obligase a estar en el hosting/cloud de la empresa que lo desarrolla (por lo que ya eliminaba unas cuantas posibilidades).&lt;/p&gt;

&lt;p&gt;Por otro lado, pensé en los problemas que había encontrado respecto a velocidad de respuesta. ¿Qué hay más rápido que una web realizada solo en HTML, CSS y JavaScript? Por lo que desestimé cualquier sistema generado de forma dinámica: nada de preguntar a bases de datos. El sistema que más me llamó la atención (y en el que entendí un mejor soporte) fue Jekyll.&lt;/p&gt;

&lt;p&gt;En cuanto a hosting, simplemente estoy utilizando &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, por lo que no me tengo que preocupar por la calidad (que es bastante buena) o de pagarlo. En vez de utilizar directamente la opción que nos da GitHub para construir nuestro blog Jekyll, hice un fork de una plantilla que me gustó y soy yo mismo quien construye los ficheros que forman la web, utilizando &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis&lt;/a&gt; (de esta forma, añado algunas cosas como la posibilidad de comprimir las imágenes y las páginas generadas en HTML, con lo que la velocidad de respuesta aumenta algo, aunque tampoco es algo notable).&lt;/p&gt;

&lt;p&gt;El subirlo a GitHub ayuda, además, a que lo que escriba se vea reflejado en más de un sitio.&lt;/p&gt;

&lt;p&gt;Empiezo con esto una nueva etapa&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jekyllrb.com/img/logo-2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://blog.iblancasa.com/article/hola-mundo/&quot;&gt;Hola mundo&lt;/a&gt; was originally published by Israel Blancas at &lt;a href=&quot;http://blog.iblancasa.com&quot;&gt;iblancasa - Blog&lt;/a&gt; on October 06, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>
